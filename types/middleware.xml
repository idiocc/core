<types>
  <import name="Context" from="koa" />
  <import name="Stats" from="fs" />
  <import name="ServerResponse" from="http" />
  <import name="StorageEngine" from="koa-multer" />

  <type name="SetHeaders" type="(res: ServerResponse, path: string, stats: Stats) => any" />
  <type name="StaticConfig">
    <prop number name="maxage" default="0">
      Browser cache max-age in milliseconds.
    </prop>
    <prop boolean name="hidden" default="false">
      Allow transfer of hidden files.
    </prop>
    <prop string name="index" default="index.html">
      Default file name.
    </prop>
    <prop boolean name="defer" default="false">
      If `true`, serves after return next(), allowing any downstream middleware to respond first.
    </prop>
    <prop boolean name="gzip" default="true">
      Try to serve the gzipped version of a file automatically when gzip is supported by a client and if the requested file with `.gz` extension exists.
    </prop>
    <prop boolean name="br" default="true">
      Try to serve the brotli version of a file automatically when brotli is supported by a client and if the requested file with `.br` extension exists (note, that brotli is only accepted over https).
    </prop>
    <prop opt type="SetHeaders" name="setHeaders">
      Function to set custom headers on response.
    </prop>
    <prop boolean name="extensions" default="false">
      Try to match extensions from passed array to search for file when no extension is sufficed in URL. First found is served.
    </prop>
  </type>
  <type name="Limits">
    <prop opt number name="fieldNameSize">
      Max field name size (Default: 100 bytes).
    </prop>
    <prop opt number name="fieldSize">
      Max field value size (Default: 1MB).
    </prop>
    <prop opt number name="fields">
      Max number of non- file fields (Default: Infinity).
    </prop>
    <prop opt number name="fileSize">
      For multipart forms, the max file size (in bytes)(Default: Infinity).
    </prop>
    <prop opt number name="files">
      For multipart forms, the max number of file fields (Default: Infinity).
    </prop>
    <prop opt number name="parts">
      For multipart forms, the max number of parts (fields + files)(Default: Infinity).
    </prop>
    <prop opt number name="headerPairs">
      For multipart forms, the max number of header key=> value pairs to parse Default: 2000 (same as node's http).
    </prop>
  </type>
  <type name="MulterConfig">
    <prop opt string name="dest">
      Where to store the files.
    </prop>
    <prop opt type="StorageEngine" name="storage">
      Where to store the files.
    </prop>
    <prop opt type="(req: IncomingMessage, file: File, callback: (error: Error | null, acceptFile: boolean)) => void" name="fileFilter">
      Function to control which files are accepted.
    </prop>
    <prop opt type="Limits" name="limits">
      Limits of the uploaded data.
    </prop>
    <prop boolean name="preservePath" default="false">
      Keep the full path of files instead of just the base name.
    </prop>
  </type>
  <type name="CSRFConfig">
    <prop opt string name="invalidSessionSecretMessage" />
    <prop opt number name="invalidSessionSecretStatusCode" />
    <prop opt string name="invalidTokenMessage" />
    <prop opt number name="invalidTokenStatusCode" />
    <prop opt type="string[]" name="excludedMethods" />
    <prop opt boolean name="disableQuery" />
  </type>
  <type name="BodyparserConfig">
    <prop type="string[]" name="enableTypes" default="['json', 'form']">
      Parser will only parse when request type hits enableTypes.
    </prop>
    <prop string name="encode" default="utf-8">
      Requested encoding.
    </prop>
    <prop string name="formLimit" default="56kb">
      Limit of the urlencoded body. If the body ends up being larger than this limit a 413 error code is returned.
    </prop>
    <prop string name="jsonLimit" default="1mb">
      Limit of the json body.
    </prop>
    <prop boolean name="strict" default="true">
      When set to true, JSON parser will only accept arrays and objects.
    </prop>
    <prop opt type="(ctx: Context) => boolean" name="detectJSON" default="null">
      Custom json request detect function.
    </prop>
    <prop opt type="{json: string[], form: string[], text: string[]}" name="extendTypes">
      Support extend types.
    </prop>
    <prop opt type="(err: Error, ctx: Context) => void" name="onerror">
      Support custom error handle.
    </prop>
  </type>
  <type name="CompressConfig">
    <prop opt type="(content_type: string) => boolean" name="filter">
      An optional function that checks the response content type to decide whether to compress. By default, it uses `compressible`.
    </prop>
    <prop opt number name="threshold">
      Minimum response size in bytes to compress. Default 1024 bytes or 1kb.
    </prop>
    <prop opt number name="flush">
      default: zlib.constants.Z_NO_FLUSH
    </prop>
    <prop opt number name="finishFlush">
      default: zlib.constants.Z_FINISH
    </prop>
    <prop opt number name="chunkSize">
      default: 16*1024
    </prop>
    <prop opt number name="windowBits">
      Support extend types.
    </prop>
    <prop opt number name="level">
      compression only
    </prop>
    <prop opt number name="memLevel">
      compression only
    </prop>
    <prop opt number name="strategy">
      compression only
    </prop>
    <prop opt name="dictionary">
      deflate/inflate only, empty dictionary by default
    </prop>
  </type>
  <type name="LoggerConfig">
    <prop opt type="(str: string, args: [string, string, string, string, string, string, string]) => void" name="transporter">
      Param `str` is output string with ANSI Color, and you can get pure text with other modules like `strip-ansi`. Param `args` is a array by `[format, method, url, status, time, length]`.
    </prop>
  </type>
  <type name="Config">
    <prop number name="port" default="5000">
      Port on which to start the server.
    </prop>
    <prop string name="host" default="0.0.0.0">
      The host on which to listen.
    </prop>
  </type>
  <type name="StaticOptions">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
    <prop type="string|string[]" name="root">
      Root or multiple roots from which to serve files.
    </prop>
    <prop string name="mount" default="/">
      Path from which to serve files.
    </prop>
    <prop number name="maxage" default="0">
      How long to cache file for.
    </prop>
    <prop opt type="StaticConfig" name="config">
      `koa-static` configuration.
    </prop>
  </type>
  <type name="LoggerOptions">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
    <prop opt type="object" name="config">
      `koa-logger` configuration.
    </prop>
  </type>
  <type name="MulterOptions">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
    <prop opt type="MulterConfig" name="config">
      `koa-multer` configuration.
    </prop>
  </type>
  <type name="CSRFOptions">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
    <prop opt type="CSRFConfig" name="config">
      `koa-csrf` configuration.
    </prop>
  </type>
  <type name="BodyparserOptions">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
    <prop opt type="BodyparserConfig" name="config">
      `koa-bodyparser` configuration.
    </prop>
  </type>
  <type name="CompressOptions">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
    <prop opt type="CompressConfig" name="config">
      `koa-compress` configuration.
    </prop>
  </type>
  <type name="CheckauthOptions">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
  </type>
  <type name="CheckauthOptions">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
  </type>
  <type name="LoggerOptions">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
    <prop opt type="LoggerConfig" name="config">
      `logger` configuration.
    </prop>
  </type>
  <type
    name="MiddlewareConfig"
    desc="Middleware configuration for the `idio` `core` server."
    spread noExpand
  >
    <prop opt type="SessionOptions" name="session">
      `session` options.
    </prop>
    <prop opt type="MulterOptions" name="multer">
      `multer` options.
    </prop>
    <prop opt type="CSRFOptions" name="csrf">
      `csrf` options.
    </prop>
    <prop opt type="BodyparserOptions" name="bodyparser">
      `bodyparser` options.
    </prop>
    <prop opt type="CompressOptions" name="compress">
      `compress` options.
    </prop>
    <prop opt type="CheckauthOptions" name="checkauth">
      `checkauth` options.
    </prop>
    <prop opt type="LoggerOptions" name="logger">
      `logger` options.
    </prop>
    <prop opt type="StaticOptions" name="static">
      `static` options.
    </prop>
  </type>
</types>
