{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BrC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1D,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,MAAM;EACnD,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEzC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEX,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;AAC5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+LA,MAAM,CAAC,OAAO,CAAC","file":"index.js","sourcesContent":["import startApp from './lib/start-app'\n\n/**\n * Start the server.\n * @param {MiddlewareConfig} [middlewareConfig] Middleware configuration for the `idio` `core` server.\n * @param {SessionOptions} [middlewareConfig.session] `session` options.\n * @param {MulterOptions} [middlewareConfig.multer] `multer` options.\n * @param {CSRFOptions} [middlewareConfig.csrf] `csrf` options.\n * @param {BodyparserOptions} [middlewareConfig.bodyparser] `bodyparser` options.\n * @param {CompressOptions} [middlewareConfig.compress] `compress` options.\n * @param {CheckauthOptions} [middlewareConfig.checkauth] `checkauth` options.\n * @param {LoggerOptions} [middlewareConfig.logger] `logger` options.\n * @param {StaticOptions} [middlewareConfig.static] `static` options.\n * @param {Config} [config] Server configuration object.\n * @param {number} [config.port=5000] The port on which to start the server. Default `5000`.\n * @param {string} [config.host=\"0.0.0.0\"] The host on which to listen. Default `0.0.0.0`.\n * @example\n *\n * // start a server, and serve files from the \"static\" directory.\n * await idioCore({\n *  static: {\n *    use: true,\n *    root: 'static',\n *    config: {\n *      hidden: true,\n *    },\n *  },\n * })\n */\nasync function idioCore(middlewareConfig = {}, config = {}) {\n  const res = await startApp(middlewareConfig, config)\n  const { url, app, router, middleware } = res\n  /** @type {Object.<string, Middleware>} */\n  const mw = middleware\n\n  return { url, app, router, middleware: mw }\n}\n\n// here until https://github.com/Microsoft/TypeScript/issues/26921 solved\n/**\n * @typedef {import('koa').Middleware} Middleware\n */\n\n/* documentary types/options/bodyparser.xml */\n/**\n * @typedef {Object} BodyparserOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {BodyparserConfig} [config] `koa-bodyparser` configuration.\n */\n\n/* documentary types/config/bodyparser.xml */\n/**\n * @typedef {import('koa').Context} Context\n *\n * @typedef {Object} BodyparserConfig\n * @prop {string[]} [enableTypes=\"['json', 'form']\"] Parser will only parse when request type hits enableTypes. Default `['json', 'form']`.\n * @prop {string} [encode=\"utf-8\"] Requested encoding. Default `utf-8`.\n * @prop {string} [formLimit=\"56kb\"] Limit of the urlencoded body. If the body ends up being larger than this limit a 413 error code is returned. Default `56kb`.\n * @prop {string} [jsonLimit=\"1mb\"] Limit of the json body. Default `1mb`.\n * @prop {boolean} [strict=true] When set to true, JSON parser will only accept arrays and objects. Default `true`.\n * @prop {(ctx: Context) => boolean} [detectJSON=\"null\"] Custom json request detect function. Default `null`.\n * @prop {{json: string[], form: string[], text: string[]}} [extendTypes] Support extend types.\n * @prop {(err: Error, ctx: Context) => void} [onerror] Support custom error handle.\n */\n\n/* documentary types/options/checkauth.xml */\n/**\n * @typedef {Object} CheckauthOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n */\n\n/**\n * @typedef {Object} CheckauthOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n */\n\n/* documentary types/options/compress.xml */\n/**\n * @typedef {Object} CompressOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {CompressConfig} [config] `koa-compress` configuration.\n */\n\n/* documentary types/config/compress.xml */\n/**\n * @typedef {Object} CompressConfig\n * @prop {(content_type: string) => boolean} [filter] An optional function that checks the response content type to decide whether to compress. By default, it uses `compressible`.\n * @prop {number} [threshold=1024] Minimum response size in bytes to compress. Default `1024`.\n * @prop {number} [flush] Default: `zlib.constants.Z_NO_FLUSH`.\n * @prop {number} [finishFlush] Default: `zlib.constants.Z_FINISH`.\n * @prop {number} [chunkSize] Default: `16*1024`.\n * @prop {number} [windowBits] Support extend types.\n * @prop {number} [level] Compression only.\n * @prop {number} [memLevel] Compression only.\n * @prop {number} [strategy] Compression only.\n * @prop {*} [dictionary] Deflate/inflate only, empty dictionary by default.\n */\n\n/* documentary types/options/csrf.xml */\n/**\n * @typedef {Object} CSRFOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {CSRFConfig} [config] `koa-csrf` configuration.\n */\n\n/* documentary types/config/csrf.xml */\n/**\n * @typedef {Object} CSRFConfig\n * @prop {string} [invalidSessionSecretMessage]\n * @prop {number} [invalidSessionSecretStatusCode]\n * @prop {string} [invalidTokenMessage]\n * @prop {number} [invalidTokenStatusCode]\n * @prop {string[]} [excludedMethods]\n * @prop {boolean} [disableQuery]\n */\n\n/* documentary types/options/logger.xml */\n/**\n * @typedef {Object} LoggerOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {LoggerConfig} [config] `koa-logger` configuration.\n */\n\n/* documentary types/config/logger.xml */\n/**\n * @typedef {Object} LoggerConfig\n * @prop {(str: string, args: [string, string, string, string, string, string, string]) => void} [transporter] Param `str` is output string with ANSI Color, and you can get pure text with other modules like `strip-ansi`. Param `args` is a array by `[format, method, url, status, time, length]`.\n */\n\n/* documentary types/options/multer.xml */\n/**\n * @typedef {Object} MulterOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {MulterConfig} [config] `koa-multer` configuration.\n */\n\n/* documentary types/config/multer.xml */\n/**\n * @typedef {import('http').IncomingMessage} IncomingMessage\n * @typedef {import('fs').Stats} Stats\n * @typedef {import('koa-multer').StorageEngine} StorageEngine\n * @typedef {import('koa-multer').File} File\n *\n * @typedef {Object} Limits [An object](https://github.com/expressjs/multer#limits) specifying the size limits.\n * @prop {number} [fieldNameSize=100] Max field name size in bytes. Default `100`.\n * @prop {number} [fieldSize=1024] Max field value size in bytes. Default `1024`.\n * @prop {number} [fields=Infinity] Max number of non-file fields. Default `Infinity`.\n * @prop {number} [fileSize=Infinity] For multipart forms, the max file size in bytes. Default `Infinity`.\n * @prop {number} [files=Infinity] For multipart forms, the max number of file fields. Default `Infinity`.\n * @prop {number} [parts=Infinity] For multipart forms, the max number of parts (fields + files). Default `Infinity`.\n * @prop {number} [headerPairs=2000] For multipart forms, the max number of header key=> value pairs to parse. Default `2000`.\n *\n * @typedef {Object} MulterConfig\n * @prop {string} [dest] Where to store the files.\n * @prop {StorageEngine} [storage] Where to store the files.\n * @prop {(req: IncomingMessage, file: File, callback: (error: Error | null, acceptFile: boolean)) => void} [fileFilter] [Function](https://github.com/expressjs/multer#filefilter) to control which files are accepted.\n * @prop {Limits} [limits] Limits of the uploaded data.\n * @prop {boolean} [preservePath=false] Keep the full path of files instead of just the base name. Default `false`.\n */\n\n/* documentary types/options/session.xml */\n/**\n * @typedef {Object} SessionOptions\n * @prop {string[]} keys A set of keys to be installed in `app.keys`.\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {SessionConfig} [config] `koa-session` configuration.\n */\n\n/* documentary types/config/session.xml */\n/**\n * @typedef {Object} SessionConfig Configuration passed to `koa-session`.\n * @prop {string} [key=\"koa:sess\"] Cookie key. Default `koa:sess`.\n * @prop {number|'session'} [maxAge=86400000] maxAge in ms with default of 1 day. `session` will result in a cookie that expires when session/browser is closed. Warning: If a session cookie is stolen, this cookie will never expire. Default `86400000`.\n * @prop {boolean} [overwrite=true] Can overwrite or not. Default `true`.\n * @prop {boolean} [httpOnly=true] httpOnly or not. Default `true`.\n * @prop {boolean} [signed=true] Signed or not. Default `true`.\n * @prop {boolean} [rolling=false] Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. Default `false`.\n * @prop {boolean} [renew=false] Renew session when session is nearly expired, so we can always keep user logged in. Default `false`.\n */\n\n/* documentary types/options/static.xml */\n/**\n * @typedef {Object} StaticOptions\n * @prop {string|string[]} root Root or multiple roots from which to serve files.\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {string} [mount=\"/\"] Path from which to serve files. Default `/`.\n * @prop {number} [maxage=0] How long to cache file for. Default `0`.\n * @prop {StaticConfig} [config] `koa-static` configuration.\n */\n\n/* documentary types/config/static.xml */\n/**\n * @typedef {import('http').ServerResponse} ServerResponse\n *\n * @typedef {(res: ServerResponse, path: string, stats: Stats) => any} SetHeaders\n *\n * @typedef {Object} StaticConfig\n * @prop {number} [maxage=0] Browser cache max-age in milliseconds. Default `0`.\n * @prop {boolean} [hidden=false] Allow transfer of hidden files. Default `false`.\n * @prop {string} [index=\"index.html\"] Default file name. Default `index.html`.\n * @prop {boolean} [defer=false] If `true`, serves after return next(), allowing any downstream middleware to respond first. Default `false`.\n * @prop {boolean} [gzip=true] Try to serve the gzipped version of a file automatically when gzip is supported by a client and if the requested file with `.gz` extension exists. Default `true`.\n * @prop {boolean} [br=true] Try to serve the brotli version of a file automatically when brotli is supported by a client and if the requested file with `.br` extension exists (note, that brotli is only accepted over https). Default `true`.\n * @prop {SetHeaders} [setHeaders] Function to set custom headers on response.\n * @prop {boolean} [extensions=false] Try to match extensions from passed array to search for file when no extension is sufficed in URL. First found is served. Default `false`.\n */\n\n/* documentary types/middleware.xml */\n/**\n * @typedef {Object} MiddlewareConfig Middleware configuration for the `idio` `core` server.\n * @prop {SessionOptions} [session] `session` options.\n * @prop {MulterOptions} [multer] `multer` options.\n * @prop {CSRFOptions} [csrf] `csrf` options.\n * @prop {BodyparserOptions} [bodyparser] `bodyparser` options.\n * @prop {CompressOptions} [compress] `compress` options.\n * @prop {CheckauthOptions} [checkauth] `checkauth` options.\n * @prop {LoggerOptions} [logger] `logger` options.\n * @prop {StaticOptions} [static] `static` options.\n */\n\n/* documentary types/config.xml */\n/**\n * @typedef {Object} Config Server configuration object.\n * @prop {number} [port=5000] The port on which to start the server. Default `5000`.\n * @prop {string} [host=\"0.0.0.0\"] The host on which to listen. Default `0.0.0.0`.\n */\n\nexport default idioCore"]}