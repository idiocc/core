{"version":3,"sources":["../src/index.js"],"names":["idioCore","middleware","config","res","url","app","router","mw"],"mappings":";;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,eAAeA,QAAf,CAAwBC,aAAa,EAArC,EAAyCC,SAAS,EAAlD,EAAsD;AACpD,QAAMC,MAAM,MAAM,uBAASF,UAAT,EAAqBC,MAArB,CAAlB;AACA,QAAM;AAAEE,OAAF;AAAOC,OAAP;AAAYC,UAAZ;AAAoBL,gBAAYM;AAAhC,MAAuCJ,GAA7C;AAEA,SAAO;AAAEC,OAAF;AAAOC,OAAP;AAAYC,UAAZ;AAAoBL,gBAAYM;AAAhC,GAAP;AACD;AAED;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqIA;;AACA;;;;;;;eAMeP,Q","sourcesContent":["import startApp from './lib/start-app'\n\n/**\n * Start the server.\n * @param {{ session?: SessionOptions, multer?: MulterOptions, csrf?: CSRFOptions, bodyparser?: BodyparserOptions, compress?: CompressOptions, checkauth?: CheckauthOptions, logger?: LoggerOptions, static?: StaticOptions }} [middleware] Middleware configuration for the `idio` `core` server.\n * @param {Config} [config] Server configuration object.\n * @param {number} [config.port=5000] Port on which to start the server. Default `5000`.\n * @param {string} [config.host=\"0.0.0.0\"] The host on which to listen. Default `0.0.0.0`.\n * @example\n *\n * // start a server, and serve files from the \"static\" directory.\n * await idioCore({\n *  static: {\n *    use: true,\n *    root: 'static',\n *    config: {\n *      hidden: true,\n *    },\n *  },\n * })\n */\nasync function idioCore(middleware = {}, config = {}) {\n  const res = await startApp(middleware, config)\n  const { url, app, router, middleware: mw } = res\n\n  return { url, app, router, middleware: mw }\n}\n\n/* documentary types/middleware.xml */\n/**\n * @typedef {import('koa').Context} Context\n * @typedef {import('fs').Stats} Stats\n * @typedef {import('http').ServerResponse} ServerResponse\n * @typedef {import('koa-multer').StorageEngine} StorageEngine\n *\n * @typedef {(res: ServerResponse, path: string, stats: Stats) => any} SetHeaders\n *\n * @typedef {Object} StaticConfig\n * @prop {number} [maxage=0] Browser cache max-age in milliseconds. Default `0`.\n * @prop {boolean} [hidden=false] Allow transfer of hidden files. Default `false`.\n * @prop {string} [index=\"index.html\"] Default file name. Default `index.html`.\n * @prop {boolean} [defer=false] If `true`, serves after return next(), allowing any downstream middleware to respond first. Default `false`.\n * @prop {boolean} [gzip=true] Try to serve the gzipped version of a file automatically when gzip is supported by a client and if the requested file with `.gz` extension exists. Default `true`.\n * @prop {boolean} [br=true] Try to serve the brotli version of a file automatically when brotli is supported by a client and if the requested file with `.br` extension exists (note, that brotli is only accepted over https). Default `true`.\n * @prop {SetHeaders} [setHeaders] Function to set custom headers on response.\n * @prop {boolean} [extensions=false] Try to match extensions from passed array to search for file when no extension is sufficed in URL. First found is served. Default `false`.\n *\n * @typedef {Object} SessionConfig\n * @prop {string} [key=\"koa:sess\"] Cookie key. Default `koa:sess`.\n * @prop {number|'session'} [maxAge=86400000] maxAge in ms with default of 1 day. `session` will result in a cookie that expires when session/browser is closed. Warning: If a session cookie is stolen, this cookie will never expire. Default `86400000`.\n * @prop {boolean} [overwrite=true] Can overwrite or not. Default `true`.\n * @prop {boolean} [httpOnly=true] httpOnly or not or not. Default `true`.\n * @prop {boolean} [signed=true] Signed or not. Default `true`.\n * @prop {boolean} [rolling=false] Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. Default `false`.\n * @prop {boolean} [renew=false] Renew session when session is nearly expired, so we can always keep user logged in. Default `false`.\n *\n * @typedef {Object} Limits\n * @prop {number} [fieldNameSize] Max field name size (Default: 100 bytes).\n * @prop {number} [fieldSize] Max field value size (Default: 1MB).\n * @prop {number} [fields] Max number of non- file fields (Default: Infinity).\n * @prop {number} [fileSize] For multipart forms, the max file size (in bytes)(Default: Infinity).\n * @prop {number} [files] For multipart forms, the max number of file fields (Default: Infinity).\n * @prop {number} [parts] For multipart forms, the max number of parts (fields + files)(Default: Infinity).\n * @prop {number} [headerPairs] For multipart forms, the max number of header key=> value pairs to parse Default: 2000 (same as node's http).\n *\n * @typedef {Object} MulterConfig\n * @prop {string} [dest] Where to store the files.\n * @prop {StorageEngine} [storage] Where to store the files.\n * @prop {(req: IncomingMessage, file: File, callback: (error: Error | null, acceptFile: boolean)) => void} [fileFilter] Function to control which files are accepted.\n * @prop {Limits} [limits] Limits of the uploaded data.\n * @prop {boolean} [preservePath=false] Keep the full path of files instead of just the base name. Default `false`.\n *\n * @typedef {Object} CSRFConfig\n * @prop {string} [invalidSessionSecretMessage]\n * @prop {number} [invalidSessionSecretStatusCode]\n * @prop {string} [invalidTokenMessage]\n * @prop {number} [invalidTokenStatusCode]\n * @prop {string[]} [excludedMethods]\n * @prop {boolean} [disableQuery]\n *\n * @typedef {Object} BodyparserConfig\n * @prop {string[]} [enableTypes=\"['json', 'form']\"] Parser will only parse when request type hits enableTypes. Default `['json', 'form']`.\n * @prop {string} [encode=\"utf-8\"] Requested encoding. Default `utf-8`.\n * @prop {string} [formLimit=\"56kb\"] Limit of the urlencoded body. If the body ends up being larger than this limit a 413 error code is returned. Default `56kb`.\n * @prop {string} [jsonLimit=\"1mb\"] Limit of the json body. Default `1mb`.\n * @prop {boolean} [strict=true] When set to true, JSON parser will only accept arrays and objects. Default `true`.\n * @prop {(ctx: Context) => boolean} [detectJSON=\"null\"] Custom json request detect function. Default `null`.\n * @prop {{json: string[], form: string[], text: string[]}} [extendTypes] Support extend types.\n * @prop {(err: Error, ctx: Context) => void} [onerror] Support custom error handle.\n *\n * @typedef {Object} CompressConfig\n * @prop {(content_type: string) => boolean} [filter] An optional function that checks the response content type to decide whether to compress. By default, it uses `compressible`.\n * @prop {number} [threshold] Minimum response size in bytes to compress. Default 1024 bytes or 1kb.\n * @prop {number} [flush] default: zlib.constants.Z_NO_FLUSH\n * @prop {number} [finishFlush] default: zlib.constants.Z_FINISH\n * @prop {number} [chunkSize] default: 16*1024\n * @prop {number} [windowBits] Support extend types.\n * @prop {number} [level] compression only\n * @prop {number} [memLevel] compression only\n * @prop {number} [strategy] compression only\n * @prop {*} [dictionary] deflate/inflate only, empty dictionary by default\n *\n * @typedef {Object} LoggerConfig\n * @prop {(str: string, args: [string, string, string, string, string, string, string]) => void} [transporter] Param `str` is output string with ANSI Color, and you can get pure text with other modules like `strip-ansi`. Param `args` is a array by `[format, method, url, status, time, length]`.\n *\n * @typedef {Object} Config\n * @prop {number} [port=5000] Port on which to start the server. Default `5000`.\n * @prop {string} [host=\"0.0.0.0\"] The host on which to listen. Default `0.0.0.0`.\n *\n * @typedef {Object} StaticOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {string|string[]} root Root or multiple roots from which to serve files.\n * @prop {string} [mount=\"/\"] Path from which to serve files. Default `/`.\n * @prop {number} [maxage=0] How long to cache file for. Default `0`.\n * @prop {StaticConfig} [config] `koa-static` configuration.\n *\n * @typedef {Object} LoggerOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {object} [config] `koa-logger` configuration.\n *\n * @typedef {Object} SessionOptions\n * @prop {string[]} keys A set of keys to be installed in app.keys.\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {SessionConfig} [config] `koa-session` configuration.\n *\n * @typedef {Object} MulterOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {MulterConfig} [config] `koa-multer` configuration.\n *\n * @typedef {Object} CSRFOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {CSRFConfig} [config] `koa-csrf` configuration.\n *\n * @typedef {Object} BodyparserOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {BodyparserConfig} [config] `koa-bodyparser` configuration.\n *\n * @typedef {Object} CompressOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {CompressConfig} [config] `koa-compress` configuration.\n *\n * @typedef {Object} CheckauthOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n *\n * @typedef {Object} CheckauthOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n *\n * @typedef {Object} LoggerOptions\n * @prop {boolean} [use=false] Use this middleware for every request. Default `false`.\n * @prop {LoggerConfig} [config] `logger` configuration.\n *\n * @typedef {Object} MiddlewareConfig Middleware configuration for the `idio` `core` server.\n * @prop {SessionOptions} [session] `session` options.\n * @prop {MulterOptions} [multer] `multer` options.\n * @prop {CSRFOptions} [csrf] `csrf` options.\n * @prop {BodyparserOptions} [bodyparser] `bodyparser` options.\n * @prop {CompressOptions} [compress] `compress` options.\n * @prop {CheckauthOptions} [checkauth] `checkauth` options.\n * @prop {LoggerOptions} [logger] `logger` options.\n * @prop {StaticOptions} [static] `static` options.\n */\n\n/* documentary types/config.xml */\n/**\n * @typedef {Object} Config Server configuration object.\n * @prop {number} [port=5000] Port on which to start the server. Default `5000`.\n * @prop {string} [host=\"0.0.0.0\"] The host on which to listen. Default `0.0.0.0`.\n */\n\nexport default idioCore\n"],"file":"index.js"}