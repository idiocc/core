{"version":3,"sources":["../../src/lib/start-app.js"],"names":[],"mappings":"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","file":"lib/start-app.js","sourcesContent":["import { debuglog } from 'util'\nimport enableDestroy from 'server-destroy'\nimport Router from 'koa-router'\nimport Koa from 'koa'\nimport erotic from 'erotic'\nimport setupMiddleware from './setup-middleware'\n\n/**\n * Create an application and setup middleware.\n * @param {MiddlewareConfig} middlewareConfig\n */\nasync function createApp(middlewareConfig) {\n  const app = new Koa()\n\n  const middleware = await setupMiddleware(middlewareConfig, app)\n\n  if (app.env == 'production') {\n    app.proxy = true\n  }\n\n  return {\n    app,\n    middleware,\n  }\n}\n\nconst LOG = debuglog('idio')\n\nconst DEFAULT_PORT = 5000\nconst DEFAULT_HOST = '0.0.0.0'\n\nasync function destroy(server) {\n  await new Promise((resolve) => {\n    server.on('close', resolve)\n    server.destroy()\n  })\n  LOG('destroyed the server')\n}\n\n/**\n * @param {import('koa').Application} app\n * @param {number} [port]\n * @param {string} [hostname='0.0.0.0']\n */\nfunction listen(app, port, hostname = '0.0.0.0') {\n  const cb = erotic(true)\n  return new Promise((r, j) => {\n    const ec = (err) => {\n      const e = cb(err)\n      j(e)\n    }\n    const server = app.listen(port, hostname, () => {\n      r(server)\n      app.removeListener('error', ec)\n    }).once('error', ec)\n  })\n}\n\n/**\n * Start the server.\n * @param {MiddlewareConfig} [middlewareConfig] Middleware configuration.\n * @param {Config} [config] Configuration object.\n */\nasync function startApp(middlewareConfig, config) {\n  const {\n    port = DEFAULT_PORT,\n    host = DEFAULT_HOST,\n  } = config\n\n  // close all connections when running nodemon\n  process.once('SIGUSR2', async () => {\n    await app.destroy()\n    process.kill(process.pid, 'SIGUSR2')\n  })\n\n  const appMeta = await createApp(middlewareConfig, config)\n  const { app } = appMeta\n\n  const server = await listen(app, port, host)\n\n  enableDestroy(server)\n  app.destroy = async () => {\n    await destroy(server)\n  }\n  const { port: p } = server.address()\n\n  const url = `http://localhost:${p}`\n\n  const router = new Router()\n\n  return { ...appMeta, router, url }\n}\n\nexport default startApp\n\n/**\n * @typedef {import('..').MiddlewareConfig} MiddlewareConfig\n * @typedef {import('..').Config} Config\n */"]}