{"version":3,"sources":["../../src/lib/setup-middleware.js"],"names":["setupStatic","app","config","root","maxage","mount","roots","Array","isArray","m","map","r","fn","c","setupCompress","threshold","flush","Z_SYNC_FLUSH","setupCheckAuth","setupSession","keys","Error","ses","setupCsrf","csrf","CSRF","setupMulter","dest","resolvedDir","uploadDirTestPath","upload","setupBodyParser","bodyparser","setupLogger","l","session","multer","compress","checkauth","logger","static","initMiddleware","name","conf","function","use","rest","res","setupMiddleware","middleware","Object","reduce","acc","accRes","installed","p","Promise","all"],"mappings":"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","sourcesContent":["import session from 'koa-session'\nimport CSRF from 'koa-csrf'\nimport multer from 'koa-multer'\nimport bodyParser from 'koa-bodyparser'\nimport logger from 'koa-logger'\nimport ensurePath from '@wrote/ensure-path'\nimport { join, resolve } from 'path'\nimport compress from 'koa-compress'\nimport serve from 'koa-static'\nimport compose from 'koa-compose'\nimport { Z_SYNC_FLUSH } from 'zlib'\nimport Mount from 'koa-mount'\nimport checkAuth from './check-auth'\n\nfunction setupStatic(app, config, {\n  root = [],\n  maxage,\n  mount,\n}) {\n  const roots = Array.isArray(root) ? root : [root]\n  const m = roots.map((r) => {\n    const fn = serve(r, {\n      maxage,\n      ...config,\n    })\n    return fn\n  })\n  const c = compose(m)\n  if (mount) return Mount(mount, c)\n  return c\n}\n\nfunction setupCompress(app, config, {\n  threshold = 1024,\n}) {\n  const fn = compress({\n    threshold,\n    flush: Z_SYNC_FLUSH,\n    ...config,\n  })\n  return fn\n}\nfunction setupCheckAuth() {\n  return checkAuth()\n}\nfunction setupSession(app, config, { keys }) {\n  if (!Array.isArray(keys)) {\n    throw new Error('Keys must be an array')\n  }\n  app.keys = keys\n  const ses = session(config, app)\n  return ses\n}\nfunction setupCsrf(app, config) {\n  const csrf = new CSRF(config)\n  return csrf\n}\n\nconst setupMulter = async (app, config = {})  => {\n  if (typeof config.dest != 'string') {\n    throw new Error('expecting uploadDir for multer')\n  }\n  const resolvedDir = resolve(config.dest)\n  const uploadDirTestPath = join(resolvedDir, 'test.data')\n  await ensurePath(uploadDirTestPath)\n  const upload = multer(config)\n  return upload\n}\n\nconst setupBodyParser = (app, config) => {\n  const bodyparser = bodyParser(config)\n  return bodyparser\n}\n\nconst setupLogger = () => {\n  const l = logger()\n  return l\n}\n\nconst map = {\n  session: setupSession,\n  multer: setupMulter,\n  csrf: setupCsrf,\n  compress: setupCompress,\n  bodyparser: setupBodyParser,\n  checkauth: setupCheckAuth,\n  logger: setupLogger,\n  static: setupStatic,\n}\n\nasync function initMiddleware(name, conf, app) {\n  const fn = typeof conf.function == 'function' ? conf.function : map[name]\n  if (typeof fn != 'function') {\n    throw new Error(`Expecting function for ${name} middleware`)\n  }\n  const { use, config = {}, ...rest } = conf\n  const res = await fn(app, config, rest)\n  if (use) {\n    app.use(res)\n  }\n  return res\n}\n\nexport default async function setupMiddleware(middleware = {}, app) {\n  const res = await Object.keys(middleware)\n    .reduce(async (acc, name) => {\n      const accRes = await acc\n      const conf = middleware[name]\n      let installed\n      if (Array.isArray(conf)) {\n        const p = conf.map(async (c) => {\n          await initMiddleware(name, c, app)\n        })\n        installed = await Promise.all(p)\n      } else {\n        installed = await initMiddleware(name, conf, app)\n      }\n      return {\n        ...accRes,\n        [name]: installed,\n      }\n    }, {})\n  return res\n}\n"],"file":"setup-middleware.js"}